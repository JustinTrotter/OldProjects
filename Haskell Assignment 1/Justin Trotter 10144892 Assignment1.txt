*****************************************************************************************************
--Justin Trotter 10144892
--This terminates because it does not recur
xor :: Bool -> Bool -> Bool
xor a b                 = if a == b
                                then False
                                else True
-- This terminates because the 2nd argument is reduced before every recursion
mult :: Int -> Int -> Int
mult a b                = if a < 0 || b < 0
                                then error ("Invalid Natural Number\n")
                                else if a == 0 || b == 0
                                        then 0
                                        else a + mult a (b - 1) --number gets smaller

-- This terminates because it will reach the end of the finite list
maxList :: (Ord a) => [a] -> a
maxList []              = error ("Empty Lists Not Allowed\n")
maxList (x:[])          = x
maxList (x:xs)          = max x (maxList xs)  --list gets smaller

-- This terminates if the function it calls also terminates (which it does)
adjpairs :: (Ord a) => [a] -> [(a,a)]
adjpairs []             = []
adjpairs xs             = zip xs (tail xs) --calls zip which will terminate

-- This terminates if the function it calls also terminates (which is does
mean :: [Int] -> Int
mean []                 = 0
mean xs                 = sum xs `div` length xs --note this is kind of slow O(n^2)

-- This terminates if the function it calls also terminates (which it does)
natToBin :: Int -> [Int]
natToBin 0              = [0]
natToBin x              = if x < 0
                                then error ("Invalid Natural Number\n")
                                else reverse (auxNatToBin x) -- calls reverse which will terminate

-- This terminates because it will reach the end of the finite list
auxNatToBin :: Int -> [Int]
auxNatToBin 0           = []
auxNatToBin x           = (x `mod` 2) : auxNatToBin (x `div` 2) --list gets smaller
****************************************************************************************************
[jetrotte@turing ~]$ more typescript
Script started on Mon 15 Sep 2014 07:58:54 PM CDT
[jetrotte@turing ~]$ ghci
GHCi, version 7.8.3: http://www.haskell.org/ghc/  :? for help
Loading package ghc-prim ... linking ... done.
Loading package integer-gmp ... linking ... done.
Loading package base ... linking ... done.
Prelude> :l assignment1
[1 of 1] Compiling Main             ( assignment1.hs, interpreted )
Ok, modules loaded: Main.
*Main> xor True True
False
*Main> xor False False
False
*Main> xor True False
True
*Main> xor False True
True
*Main> mult 2 3
6
*Main> mult 1034 3464
3581776
*Main> mult (-1) 345
*** Exception: Invalid Natural Number

*Main> maxList [1..10]
10
*Main> maxList [4,1,7,3,9,6,4]
9
*Main> maxList "candy"
'y'
*Main> maxList []
*** Exception: Empty Lists Not Allowed

*Main> adjpairs [1..10]
[(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10)]
*Main> adjpairs [10..1]
[]
*Main> adjpairs [10, 9..1]
[(10,9),(9,8),(8,7),(7,6),(6,5),(5,4),(4,3),(3,2),(2,1)]
*Main> adjpairs "candy"
[('c','a'),('a','n'),('n','d'),('d','y')]
*Main> mean [0..10]
5
*Main> mean [1, 5, 3, 2, 8, 3]
3
*Main> natToBin 23
[1,0,1,1,1]
*Main> natToBin 0
[0]
*Main> natToBin 38462
[1,0,0,1,0,1,1,0,0,0,1,1,1,1,1,0]
*Main> natToBin (-1)
*** Exception: Invalid Natural Number

*Main>
Leaving GHCi.
[jetrotte@turing ~]$ exit

Script done on Mon 15 Sep 2014 08:07:24 PM CDT
********************************************************************************************